# importando bibliotecas
import pygame
import random

# inicializando
pygame.init()
pygame.mixer.init()

# cores
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (14, 209, 69)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
ORANGE = (224, 81, 18)

# dados do jogo
WIDTH = 800
HEIGHT = 600
FPS = 5

# tamanho da tela
screen = pygame.display.set_mode((WIDTH, HEIGHT))

# nome do jogo
pygame.display.set_caption("Cobrinha")

# sprites
cabeca = pygame.image.load('cabeca.png')
coelho = pygame.image.load('coelho.png')
fundo = pygame.image.load('ground.jpg')

cabeca = pygame.transform.scale(cabeca, (40, 40))
coelho = pygame.transform.scale(coelho, (30, 30))
fundo = pygame.transform.scale(fundo, (WIDTH, HEIGHT))

# musicas e sons
pygame.mixer.music.load('musica_menu.wav')
pygame.mixer.music.set_volume(1)

pygame.display.flip()
clock = pygame.time.Clock()

lado_bloco = 40
lado_coelho = 40

direcao = "direita"

# fontes por tamanho
fonte_pequena = pygame.font.SysFont("comicsansms", 24)
fonte_media = pygame.font.SysFont("comicsansms", 48)
fonte_grande = pygame.font.SysFont("comicsansms", 72)

def texto(texto, cor, tamanho):
    if tamanho == "peq":
        local_texto = fonte_pequena.render(texto, True, cor)
    elif tamanho == "med":
        local_texto = fonte_media.render(texto, True, cor)
    elif tamanho == "gde":
        local_texto = fonte_grande.render(texto, True, cor)
    return local_texto, local_texto.get_rect()


def mensagem(msg, cor, posicao_y=0, tam="peq"):
    local_texto, rect_texto = texto(msg, cor, tam)
    rect_texto.center = (WIDTH / 2), (HEIGHT / 2) + posicao_y
    screen.blit(local_texto, rect_texto)

# menu pausa
def pause():
    pausado = True
    mensagem("Pausado", WHITE, -100, "gde")
    mensagem("Aperte Espaço para continuar ou Esc para sair.", WHITE, 25)
    pygame.display.update()

    while pausado:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.QUIT()
                quit()

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    pausado = False

                elif event.key == pygame.K_ESCAPE:
                    pygame.quit()
                    quit()
        clock.tick(FPS)


# placar
def score(numero):
    texto = fonte_pequena.render("Placar: {0}".format(str(numero)), True, WHITE)
    screen.blit(texto, [0, 0])


def gerador_coelho():
    x_coelho = round(random.randrange(lado_coelho, WIDTH - lado_coelho, step=lado_coelho+1))
    y_coelho = round(random.randrange(lado_coelho, HEIGHT - lado_coelho, step=lado_coelho+1))
    return x_coelho, y_coelho


rand_coelho_x = gerador_coelho()[0]
rand_coelho_y = gerador_coelho()[1]


def snake(lado, lista_cobra):
    if direcao == "direita":
        cabeca_cobra = pygame.transform.rotate(cabeca, 270)
    if direcao == "esquerda":
        cabeca_cobra = pygame.transform.rotate(cabeca, 90)
    if direcao == "cima":
        cabeca_cobra = cabeca
    if direcao == "baixo":
        cabeca_cobra = pygame.transform.rotate(cabeca, 180)
    screen.blit(cabeca_cobra, (lista_cobra[-1][0], lista_cobra[-1][1]))

    for x_y in lista_cobra[:-1]:
        pygame.draw.rect(screen, GREEN,
                         [x_y[0], x_y[1], lado, lado])

def intro():
    pygame.mixer.music.load('musica_menu.wav')
    pygame.mixer.music.play(loops=-1)

    intro = True

    while intro:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    intro = False
                if event.key == pygame.K_ESCAPE:
                    pygame.quit()
                    quit()

        screen.fill(BLACK)
        mensagem("Bem vindo", GREEN, -170, "gde")
        mensagem("ao Cobrinha!", GREEN, -90, "gde")
        mensagem("Coma os coelinhos e cresça.", WHITE, -10)
        mensagem("Se você bater em si, ou", RED, 40)
        mensagem("nas bordas, você morre!",
                 RED, 80)
        mensagem("Aperte Espaço para começar, P para pausar e Esc para sair.", WHITE, 180)

        pygame.display.update()
        clock.tick(FPS)


def loop():
    pygame.mixer.music.load("musica_jogo.wav")
    pygame.mixer.music.play(loops=-1)

    comendo = pygame.mixer.Sound("comendo.wav")

    global direcao
    direcao = "direita"
    game_exit = False
    game_over = False

    # para acompanhar o primeiro bloco da cobra
    posicao_x = WIDTH / 2
    posicao_y = HEIGHT / 2
    mudar_x = 20
    mudar_y = 0

    # lista do tamanho da cobra (o último item é a cabeça)
    lista_cobra = []
    tamanho_cobra = 1

    rand_coelho_x = gerador_coelho()[0]
    rand_coelho_y = gerador_coelho()[1]

    while not game_exit:

        if game_over is True:
            mensagem("Você perdeu :(", RED, posicao_y=-50, tam="gde")
            mensagem("Aperte espaço para jogar de novo,", WHITE, posicao_y=50, tam="med")
            mensagem("ou aperte Esc para sair.", WHITE, posicao_y=100, tam="med")
            pygame.display.update()

        while game_over is True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    game_exit = True
                    game_over = False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        game_exit = True
                        game_over = False
                    if event.key == pygame.K_SPACE:
                        loop()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_exit = True
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    if direcao != 'direita':
                        direcao = "esquerda"
                        mudar_x = -lado_bloco
                        mudar_y = 0
                elif event.key == pygame.K_RIGHT:
                    if direcao != 'esquerda':
                        direcao = "direita"
                        mudar_x = lado_bloco
                        mudar_y = 0
                elif event.key == pygame.K_UP:
                    if direcao != 'baixo':
                        direcao = "cima"
                        mudar_y = -lado_bloco
                        mudar_x = 0
                elif event.key == pygame.K_DOWN:
                    if direcao != "cima":
                        direcao = "baixo"
                        mudar_y = lado_bloco
                        mudar_x = 0
                elif event.key == pygame.K_p:
                    pause()
                elif event.key == pygame.K_ESCAPE:
                    game_exit = True

        # limite da tela
        if posicao_x >= (WIDTH) or posicao_x < 0 or posicao_y >= (
                HEIGHT) or posicao_y < 0:
            game_over = True

        # atualiza posicao cobra
        posicao_x += mudar_x
        posicao_y += mudar_y

        # background
        background_rect = fundo.get_rect()
        screen.fill(BLACK)
        screen.blit(fundo, background_rect)
        screen.blit(coelho, [rand_coelho_x, rand_coelho_y, lado_coelho, lado_coelho])

        # cria a cobra e atualiza ela no último ponto
        cabeca_cobra = []
        cabeca_cobra.append(posicao_x)
        cabeca_cobra.append(posicao_y)
        lista_cobra.append(cabeca_cobra)

        if len(lista_cobra) > tamanho_cobra:
            del lista_cobra[0]

        for quadrado in lista_cobra[:-1]:
            if quadrado == cabeca_cobra:
                game_over = True

        snake(lado_bloco, lista_cobra)
        score(tamanho_cobra - 1)

        if rand_coelho_x < posicao_x and posicao_x < (rand_coelho_x + lado_coelho) or rand_coelho_x < (
                posicao_x + lado_bloco) and (posicao_x + lado_bloco) < (rand_coelho_x + lado_coelho):
            if rand_coelho_y < posicao_y and posicao_y < (rand_coelho_y + lado_coelho):
                tamanho_cobra += 1
                rand_coelho_x, rand_coelho_y = gerador_coelho()
                comendo.play()

            elif rand_coelho_y < (posicao_y + lado_bloco) and (posicao_y + lado_bloco) < (rand_coelho_y + lado_coelho):
                tamanho_cobra += 1
                rand_coelho_x, rand_coelho_y = gerador_coelho()
                comendo.play()

        pygame.display.update()
        # FPS
        clock.tick(FPS)

    # sai do pygame
    pygame.quit()
    quit()


try:
    intro()
finally:
    loop()
